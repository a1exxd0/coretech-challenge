name: CMake and CTest verification for Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  
jobs:
  build:
    runs-on: ${{ matrix.os }}

    # Test on Linux
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Install pcap developer pack
    - name: Install libpcap abd pcapplusplus
      run: |
        sudo apt-get install libpcap-dev
        git clone https://github.com/seladb/PcapPlusPlus --branch v23.09
        cd PcapPlusPlus
        cmake -S . -B build
        cmake --build build
        sudo cmake --install build

    # Install google test dependency
    - name: Install gtest dependency
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libgtest-dev

    # Install google benchmark dependency
    - name: Install google benchmark dependency
      if: matrix.os == 'ubuntu-latest'
      run: |
        git clone https://github.com/google/benchmark.git
        cd benchmark
        cmake -E make_directory "build"
        cmake -E chdir "build" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
        cmake --build "build" --config Release
        sudo cmake --build "build" --config Release --target install

    # Configure, build, and test project
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test for Ubuntu
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      run: ctest -V